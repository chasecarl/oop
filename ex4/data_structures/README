chasecarl
ilia.bezgin




=============================
=      File description     =
=============================
Tree.java - an implementation of a binary search tree
AvlTree.java - an implementation of an AVL tree


=============================
=          Design           =
=============================
We decided to write a super class of a binary search tree from which the AVL tree class inherits.
In our opinion, it's a good style programming because there is a clear 'is-a' relationship between
AVLT and BST, so if another programmer comes and wants to write other kind of BST, he or she will
already have the base class.
The thing that also points for this design is that we decided to write an inner class that
represents a node in BST and from the same reasoning it potentially has more potential (less restrictions)
comparing to something like AVL node. Even if they are the same, it's awkward to inherit a class for
some other type of BST node from an AVL node.



=============================
=  Implementation details   =
=============================
We decided to use our class that represents tree's node to store a whole tree.
We decided to put findMaxNodes in the base class because it is the same for BST as for AVL;
therefore we had to slightly change the comment so that the description matches to the class.
We decided to have boolean variables LEFT and RIGHT to alter methods' behaviour.
Our add method (in the base class) calls addHelper method that traverses through the nodes of the tree,
comparing node values with the given newValue, and using method go that in its turn again calls
addHelper on an appropriate child. At the end addHelper returns a new node, and go method also increments
height of all nodes on the recursion path if needed.
In the AvlTree, we call an addHelper and the method correction on the new node that addHelper just returned.
In the Tree class, an overloaded addHelper (that uses only one int value) can be called with either LEFT
or RIGHT - it doesn't matter.

Method delete:
We made a recursive function, where we look at three cases: element is in the left sub tree of the current
sub tree; element in the right sub tree; or element in the root. In the first two cases we recursively delete
the element from specific sub tree. If element is in the root of current sub tree, we should change it by
the minimal element from the right sub tree and recursively delete this minimal element from right sub tree;
or if deleted element has one child  we should change it by it's child.



=============================
=    Answers to questions   =
=============================
We made an extra class Tree.java which implements the binary search tree.
It has the sub class TreeNode implements tree node; methods: add, delete, iterator, contains, findMinNodes,
findMaxNodes.
AvlTree class is extends Tree class and use most of it's methods.

5.1 Analyzing the AVL tree:
9, 4, 25, 1, 16, 36, 49, 6, 5, 20, 15, 21

5.2 The complexity of constructing an AVL tree:
- The asymptotic running time complexity of the tree construction done in AvlTree(int[] data) is O(nlog(n)).
- Also O(nlog(n))

5.3 The complexity of copying an AVL tree
- The asymptotic running time complexity of the tree construction done in AvlTree(AvlTree avlTree) is O(nlog(n))
- The best possible running time complexity for a specific case is O(2n)=O(n), where O(n) is traversing a tree
to the array and O(n) is building tree in givven order.

5.4 The complexity of calculating the minimal number of nodes in an AVL tree of a given height
- The asymptotic running time complexity of our implementation of the operation done
in findMinNodes(int h) is O(1).
- O(1) is the best possible asymptotic running time complexity.
